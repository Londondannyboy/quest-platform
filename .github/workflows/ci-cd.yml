name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run linting
      run: |
        cd backend
        pip install ruff black
        ruff check .
        black --check .
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quest_test
        REDIS_URL: redis://localhost:6379
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        site: [relocation.quest, placement.quest, rainmaker.quest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/${{ matrix.site }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend/${{ matrix.site }}
        npm ci
    
    - name: Run linting
      run: |
        cd frontend/${{ matrix.site }}
        npm run lint
    
    - name: Run tests
      run: |
        cd frontend/${{ matrix.site }}
        npm test
    
    - name: Build
      run: |
        cd frontend/${{ matrix.site }}
        npm run build

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API Gateway image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.api
        push: false
        tags: quest-api-gateway:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Workers image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.workers
        push: false
        tags: quest-workers:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [backend-tests, frontend-tests, docker-build]
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Railway (Staging)
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
      run: |
        npm install -g @railway/cli
        railway up --service quest-api-gateway --environment staging
        railway up --service quest-workers --environment staging
    
    - name: Deploy to Vercel (Staging)
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      run: |
        cd frontend/relocation.quest
        npx vercel deploy --token=$VERCEL_TOKEN --env=staging
    
    - name: Run smoke tests
      run: |
        ./scripts/smoke-tests.sh staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [backend-tests, frontend-tests, docker-build]
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Railway (Production)
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
      run: |
        npm install -g @railway/cli
        railway up --service quest-api-gateway --environment production
        railway up --service quest-workers --environment production
    
    - name: Deploy to Vercel (Production)
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      run: |
        cd frontend/relocation.quest
        npx vercel deploy --prod --token=$VERCEL_TOKEN
        cd ../placement.quest
        npx vercel deploy --prod --token=$VERCEL_TOKEN
        cd ../rainmaker.quest
        npx vercel deploy --prod --token=$VERCEL_TOKEN
    
    - name: Run smoke tests
      run: |
        ./scripts/smoke-tests.sh production
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
